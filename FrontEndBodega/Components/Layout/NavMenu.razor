@inject FrontEndBodega.Services.AutheService AuthService
@inject NavigationManager NavigationManager



<!-- Agrega esto al <head> para usar íconos -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">

<style>
    body {
        margin: 0;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background-color: #f3f3f3;
        color: #1f2937;
    }

    .side-nav {
        position: fixed;
        top: 0;
        left: 0;
        width: 250px;
        height: 100vh;
        background-color: green;
        color: black;
        display: flex;
        flex-direction: column;
        padding: 20px;
        box-shadow: 3px 0 10px rgba(0,0,0,0.1);
        z-index: 1000;
        overflow-y: auto;
    }

    .nav-header {
        font-size: 1.6rem;
        font-weight: bold;
        background-color: lavenderblush;
        padding: 15px;
        border-radius: 10px;
        text-align: center;
        margin-bottom: 30px;
        letter-spacing: 1px;
        box-shadow: inset 0 0 5px rgba(255,255,255,0.1);
    }

    .nav-links {
        flex-grow: 1;
        display: flex;
        flex-direction: column;
        gap: 14px;
    }

        .nav-links a {
            display: flex;
            align-items: center;
            gap: 12px;
            padding: 12px 18px;
            color: black;
            background-color: lightgreen;
            text-decoration: none;
            font-weight: 500;
            border-radius: 8px;
            transition: all 0.3s ease;
            border-left: 4px solid transparent;
        }

            .nav-links a:hover {
                background-color: lavenderblush;
                color: black;
                border-left: 4px solid #f5f5dc;
                transform: translateX(4px);
            }

            .nav-links a i {
                width: 20px;
                font-size: 1.1rem;
            }

    .main-content {
        margin-left: 280px;
        padding: 40px;
    }

        .main-content h1 {
            color: limegreen;
        }
</style>

<div class="side-nav">
    <div class="nav-header">Bodega R&D</div>
    <div class="nav-links">
        @if (!isInitialized)
        {
            <p>Cargando menú...</p>
        }
        else
        {
            <p><strong>Roles cargados:</strong> @string.Join(", ", userRoles)</p>

            <!-- Login siempre visible -->
            <a href=""><i class="bi bi-box-arrow-in-right"></i> Login</a>

            @if (HasRole("Administrador"))
            {
                <a href="counter"><i class="bi bi-person-plus"></i> Crear usuario</a>
                <a href="weather"><i class="bi bi-people"></i> Lista de usuarios</a>
                <a href="/roles/crear"><i class="bi bi-shield-lock"></i> Crear Roles</a>
            }

            @if (HasRole("Administrador") || HasRole("SupervisorBodega"))
            {
                <a href="/categorias/crear"><i class="bi bi-tags"></i> Crear Categoría</a>
                <a href="/proveedores"><i class="bi bi-truck"></i> Crear proveedor</a>
                <a href="/productos/crear"><i class="bi bi-box-seam"></i> Crear productos</a>
                <a href="/crear-tipo-movimiento"><i class="bi bi-arrow-left-right"></i> Crear Tipo de movimiento</a>
                <a href="/movimientos/crear"><i class="bi bi-arrow-repeat"></i> Entrada y Salida</a>
                <a href="/kardex"><i class="bi bi-journal"></i> Kardex</a>
            }

            @if (HasRole("Usuario"))
            {
                <a href="/catalogo"><i class="bi bi-box-seam"></i> Catálogo de productos</a>
            }

            @if (HasRole("Administrador"))
            {
                <a href="/kardex-reporte"><i class="bi bi-file-earmark-pdf"></i> Crear reporte PDF</a>
            }

            <a href="javascript:void(0)" @onclick="CerrarSesion">
                <i class="bi bi-box-arrow-right"></i> Cerrar sesión
            </a>
        }
    </div>
</div>

@code {
    private List<string> userRoles = new();
    private bool isInitialized = false;

    protected override async Task OnInitializedAsync()
    {
        AuthService.OnAuthStateChanged += async () =>
        {
            userRoles = await AuthService.GetUserRoles();
            isInitialized = true;
            StateHasChanged();
        };

        userRoles = await AuthService.GetUserRoles();
        isInitialized = true;
    }


    private async Task CerrarSesion()
    {
        await AuthService.Logout();

        // limpiar roles y refrescar UI
        userRoles.Clear();
        isInitialized = true; // ya inicializado, pero sin roles
        StateHasChanged();

        NavigationManager.NavigateTo("/", true);

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            userRoles = await AuthService.GetUserRoles();
            isInitialized = true;
            StateHasChanged(); // 🔄 refresca el menú
        }
    }


    // 👇 comparación robusta (case-insensitive, ignora mayúsculas/minúsculas)
    private bool HasRole(string role) =>
        userRoles.Any(r => string.Equals(r, role, StringComparison.OrdinalIgnoreCase));
}
