@page "/productos/editar/{Id:int}"
@using FrontEndBodega.DTO
@using FrontEndBodega.Services
@inject ProductoService ProductoService
@inject NavigationManager NavManager
@using Microsoft.AspNetCore.Components.Forms

<h3>Editar Producto</h3>

@if (!_cargado)
{
    <p>Cargando...</p>
}
else
{
    <EditForm Model="producto" OnValidSubmit="HandleEdit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <!-- mismos campos que Crear -->
        <div class="mb-3">
            <label>Nombre</label>
            <InputText class="form-control" @bind-Value="producto.Nombre" />
        </div>
        <div class="mb-3">
            <label>Descripción</label>
            <InputTextArea class="form-control" @bind-Value="producto.Descripcion" />
        </div>

        <div class="row">
            <div class="col">
                <label>Precio compra</label>
                <InputNumber class="form-control" @bind-Value="producto.PrecioCompra" />
            </div>
            <div class="col">
                <label>Precio venta</label>
                <InputNumber class="form-control" @bind-Value="producto.PrecioVenta" />
            </div>
            <div class="col">
                <label>Costo promedio</label>
                <InputNumber class="form-control" @bind-Value="producto.CostoPromedio" />
            </div>
        </div>

        <div class="row mt-2">
            <div class="col">
                <label>Stock actual</label>
                <InputNumber class="form-control" @bind-Value="producto.StockActual" />
            </div>
            <div class="col">
                <label>Stock mínimo</label>
                <InputNumber class="form-control" @bind-Value="producto.StockMinimo" />
            </div>
        </div>

        <div class="row mt-2">
            <div class="col">
                <label>Nombre Categoría</label>
                <InputText class="form-control" @bind-Value="producto.CategoriaNombre" />
            </div>
            <div class="col">
                <label>Nombre Proveedor</label>
                <InputText class="form-control" @bind-Value="producto.ProveedorNombre" />
            </div>
        </div>

        <button class="btn btn-primary" type="submit">Guardar cambios</button>
        <button class="btn btn-secondary ms-2" @onclick='() => NavManager.NavigateTo("/productos")'>Cancelar</button>
    </EditForm>

    <p>@mensaje</p>
}

@code {
    [Parameter] public int Id { get; set; }
    private ProductoDTO producto = new();
    private bool _cargado = false;
    private string mensaje = string.Empty;

    //NUEVO CODIGO
    private IBrowserFile? selectedFile;
    private string? vistaPreviaImagen;


    protected override async Task OnInitializedAsync()
    {
        var p = await ProductoService.GetProductoByIdAsync(Id);
        if (p != null)
        {
            producto = p;

            // Inicializar preview con la URL real si existe
            if (!string.IsNullOrEmpty(producto.ImagenUrl))
            {
                // Asegurarse que ruta sea absoluta al API:
                if (producto.ImagenUrl.StartsWith("/"))
                    vistaPreviaImagen = $"https://api-gateway-nodejs-ryd-miih.onrender.com{producto.ImagenUrl}";
                else
                    vistaPreviaImagen = producto.ImagenUrl;
            }

        }
        _cargado = true;
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        if (selectedFile == null) return;

        using var ms = new MemoryStream();
        await selectedFile.OpenReadStream(5 * 1024 * 1024).CopyToAsync(ms);
        ms.Position = 0;
        var bytes = ms.ToArray();
        vistaPreviaImagen = $"data:{selectedFile.ContentType};base64,{Convert.ToBase64String(bytes)}";

        //CODIGO VIEJO
        // var file = e.File;
        // if (file == null) return;
        // var ms = new MemoryStream();
        // await file.OpenReadStream(5 * 1024 * 1024).CopyToAsync(ms);
        // ms.Position = 0;
        // var uploadedUrl = await ProductoService.SubirImagenAsync(ms, file.Name, file.ContentType);
        // if (!string.IsNullOrEmpty(uploadedUrl)) producto.ImagenUrl = uploadedUrl.Trim('"');
        // else mensaje = "⚠️ No se pudo subir la imagen.";
    }

    private async Task HandleEdit()
    {
        try
        {
            Stream? fileStream = null;
            string? fileName = null;
            string? contentType = null;

            if (selectedFile != null)
            {
                fileStream = selectedFile.OpenReadStream(5 * 1024 * 1024);
                fileName = selectedFile.Name;
                contentType = selectedFile.ContentType;
            }

        var res = await ProductoService.EditarProductoAsync(Id, producto, fileStream, fileName, contentType);
        mensaje = res;
        if (res.StartsWith("✅")) NavManager.NavigateTo("/productos");

        }
        catch (Exception ex)
        {
            mensaje = $"❌ Error: {ex.Message}";
        }
    }
}

