@page "/roles/crear"
@using FrontEndBodega.DTO
@using FrontEndBodega.Services
@inject RolService RolService
@inject NavigationManager NavManager

@* <h3>Crear Rol</h3>

<EditForm Model="@rol" OnValidSubmit="GuardarRol">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label>Nombre del Rol:</label>
        <InputText @bind-Value="rol.NombreRol" class="form-control" />
    </div>

    <div class="mb-3">
        <label>Descripción:</label>
        <InputText @bind-Value="rol.Descripcion" class="form-control" />
    </div>

    <div class="mb-3">
    <button type="submit" class="btn btn-primary">Guardar</button>
    <button class="btn btn-secondary ms-2" @onclick='() => NavManager.NavigateTo("/roles")'>listar de roles</button>
    </div>
</EditForm> *@
<center>
<div class="main-content">
    <h3 class="titulo-principal">Crear Rol</h3>

    <EditForm Model="@rol" OnValidSubmit="GuardarRol" class="form-rol">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label class="form-label">Nombre del Rol:</label>
            <InputText @bind-Value="rol.NombreRol" class="form-control input-rol" />
        </div>

        <div class="mb-3">
            <label class="form-label">Descripción:</label>
            <InputText @bind-Value="rol.Descripcion" class="form-control input-rol" />
        </div>

        <div class="mb-3 botones-rol">
            <button type="submit" class="btn btn-guardar">Guardar</button>
            <button type="button" class="btn btn-listar" @onclick='() => NavManager.NavigateTo("/roles")'>Listado de Roles</button>
        </div>
    </EditForm>
</div>
</center>
<style>
    /* Contenedor principal */
    .main-content {
        margin-left: 280px;
        padding: 40px;
        background-color: #f3f3f3;
        min-height: 100vh;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        margin: auto;
    }

    /* Título */
    .titulo-principal {
        color: limegreen;
        font-size: 1.8rem;
        margin-bottom: 25px;
        letter-spacing: 1px;
    }

    /* Formulario */
    .form-rol {
        background-color: white;
        padding: 30px;
        border-radius: 12px;
        box-shadow: 0 4px 10px rgba(0,0,0,0.1);
        max-width: 500px;
    }

        /* Labels */
        .form-rol .form-label {
            font-weight: 600;
            color: #1f2937;
            display: block;
            margin-bottom: 6px;
        }

    /* Inputs */
    .input-rol {
        width: 100%;
        padding: 10px 14px;
        border-radius: 8px;
        border: 1px solid #ccc;
        margin-bottom: 15px;
        transition: border-color 0.3s ease, box-shadow 0.3s ease;
    }

        .input-rol:focus {
            outline: none;
            border-color: limegreen;
            box-shadow: 0 0 5px rgba(50,205,50,0.4);
        }

    /* Botones */
    .botones-rol {
        display: flex;
        gap: 10px;
    }

    .btn-guardar {
        background-color: limegreen;
        color: white;
        border: none;
        padding: 10px 18px;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
        transition: background-color 0.3s ease, transform 0.2s ease;
    }

        .btn-guardar:hover {
            background-color: #32cd32;
            transform: translateY(-1px);
        }

    .btn-listar {
        background-color: lightgreen;
        color: black;
        border: none;
        padding: 10px 18px;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
        transition: background-color 0.3s ease, transform 0.2s ease;
    }

        .btn-listar:hover {
            background-color: #9acd32;
            transform: translateY(-1px);
        }

</style>

@if (!string.IsNullOrEmpty(mensaje))
{
    <p>@mensaje</p>
}

@code {
    private RolDTO rol = new RolDTO();
    private string? mensaje;
    private int maxRoles = 5; // Límite de roles permitidos

    protected override async Task OnInitializedAsync()
    {
        // Podés traer la lista de roles desde el servicio si querés contar los existentes
        var listaRoles = await RolService.GetRolesAsync();
        if (listaRoles.Count >= maxRoles)
        {
            mensaje = $"Ya no se pueden agregar más roles. Límite: {maxRoles}";
        }
    }

    private async Task GuardarRol()
    {
        var listaRoles = await RolService.GetRolesAsync();
        if (listaRoles.Count >= maxRoles)
        {
            // Mostrar alerta si se alcanzó el límite
            await JS.InvokeVoidAsync("alert", $"Ya no se pueden agregar más roles. Límite: {maxRoles}");
            return;
        }

        var result = await RolService.CrearRolAsync(rol);
        mensaje = result;
    }

    [Inject]
    private IJSRuntime JS { get; set; } = default!;
}
