@page "/categorias"

@using FrontEndBodega.DTO
@using FrontEndBodega.Services
@inject CategoriaService CategoriaService
@inject NavigationManager NavManager

<h3>📋 Lista de Categorías</h3>

<div class="mb-3 d-flex gap-2">
    <input type="number" class="form-control w-25" placeholder="Buscar por Id..."
           @bind="buscarId" />
    <button class="btn btn-primary" @onclick="BuscarCategoriaPorId">🔍 Buscar</button>
    <button class="btn btn-secondary" @onclick="CargarCategorias">🔄 Reset</button>
</div>

@if (!_cargado)
{
    <p>Cargando...</p>
}
else if (categorias.Count == 0)
{
    <p>No hay categorías registradas.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Id</th>
                <th>Nombre</th>
                <th>Descripción</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var cat in categoriasPagina)
            {
                <tr>
                    <td>@cat.Id</td>
                    <td>@cat.Nombre</td>
                    <td>@cat.Descripcion</td>
                    <td>
                        <button class="btn btn-info"
                                @onclick='() => NavManager.NavigateTo($"/categorias/ver/{cat.Id}")'>
                            Ver
                        </button>
                        <button class="btn btn-warning"
                                @onclick='() => NavManager.NavigateTo($"/categorias/editar/{cat.Id}")'>
                            Editar
                        </button>
                        <button class="btn btn-danger"
                                @onclick="() => EliminarCategoria(cat.Id)">
                            Eliminar
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <!-- Paginación -->
    <nav>
        <ul class="pagination">
            <li class="page-item @(paginaActual == 1 ? "disabled" : "")">
                <button class="page-link" @onclick="PrevPage">« Anterior</button>
            </li>
            @for (int i = 1; i <= totalPaginas; i++)
            {
                <li class="page-item @(paginaActual == i ? "active" : "")">
                    <button class="page-link" @onclick="() => CambiarPagina(i)">@i</button>
                </li>
            }
            <li class="page-item @(paginaActual == totalPaginas ? "disabled" : "")">
                <button class="page-link" @onclick="NextPage">Siguiente »</button>
            </li>
        </ul>
    </nav>
}

<p>@mensaje</p>

@code {
    private bool _cargado = false;
    private bool _primerRender = true;
    private List<CategoriaDTO> categorias = new();
    private List<CategoriaDTO> categoriasPagina = new();
    private string mensaje = string.Empty;

    // 🔍 Buscar
    private int buscarId;

    // 📄 Paginación
    private int paginaActual = 1;
    private int tamanioPagina = 5;
    private int totalPaginas = 1;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_primerRender)
        {
            _primerRender = false;
            await CargarCategorias();
        }
    }

    private async Task CargarCategorias()
    {
        try
        {
            categorias = await CategoriaService.GetCategoriasAsync();
            CalcularPaginacion();
        }
        catch (Exception ex)
        {
            mensaje = $"❌ Error al cargar categorías: {ex.Message}";
        }

        _cargado = true;
        StateHasChanged();
    }

    private async Task BuscarCategoriaPorId()
    {
        if (buscarId <= 0)
        {
            mensaje = "⚠️ Ingresa un Id válido.";
            return;
        }

        try
        {
            var cat = await CategoriaService.GetCategoriaByIdAsync(buscarId);
            if (cat != null)
            {
                categorias = new List<CategoriaDTO> { cat };
                paginaActual = 1;
                CalcularPaginacion();
                mensaje = "✅ Categoría encontrada.";
            }
            else
            {
                mensaje = "❌ No se encontró la categoría.";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"❌ Error: {ex.Message}";
        }
    }

    // 🔹 Métodos de paginación
    private void CalcularPaginacion()
    {
        totalPaginas = (int)Math.Ceiling((double)categorias.Count / tamanioPagina);
        CambiarPagina(1);
    }

    private void CambiarPagina(int pagina)
    {
        paginaActual = pagina;
        categoriasPagina = categorias
            .Skip((paginaActual - 1) * tamanioPagina)
            .Take(tamanioPagina)
            .ToList();
    }

    private void PrevPage()
    {
        if (paginaActual > 1)
            CambiarPagina(paginaActual - 1);
    }

    private void NextPage()
    {
        if (paginaActual < totalPaginas)
            CambiarPagina(paginaActual + 1);
    }

    private async Task EliminarCategoria(int id)
    {
        try
        {
            var ok = await CategoriaService.EliminarCategoriaAsync(id);
            if (ok)
            {
                mensaje = "✅ Categoría eliminada";
                await CargarCategorias();
            }
            else
            {
                mensaje = "❌ Error al eliminar categoría";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"❌ Error al eliminar categoría: {ex.Message}";
        }
    }
}
