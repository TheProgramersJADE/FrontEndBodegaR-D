@page "/proveedores"
@using FrontEndBodega.DTO
@using FrontEndBodega.Services
@inject ProveedorService ProveedorService
@inject AutheService AutheService
@inject NavigationManager NavManager

<center>
<div class="main-content">
    <h3 class="titulo-principal">Registro de Proveedores</h3>

    <EditForm Model="@proveedor" OnValidSubmit="GuardarProveedor" class="form-proveedor">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label class="form-label">Nombre</label>
            <InputText @bind-Value="proveedor.Nombre" class="form-control input-proveedor" />
        </div>

        <div class="mb-3">
            <label class="form-label">Nombre Empresa</label>
            <InputText @bind-Value="proveedor.NombreEmpresa" class="form-control input-proveedor" />
        </div>

        <div class="mb-3">
            <label class="form-label">Teléfono</label>
            <InputText @bind-Value="proveedor.Telefono" class="form-control input-proveedor" />
        </div>

        <div class="mb-3">
            <label class="form-label">Email</label>
            <InputText @bind-Value="proveedor.Email" class="form-control input-proveedor" />
        </div>

        <div class="mb-3">
            <label class="form-label">Dirección</label>
            <InputText @bind-Value="proveedor.Direccion" class="form-control input-proveedor" />
        </div>

        <div class="mb-3 botones-proveedor">
            <button type="submit" class="btn btn-guardar">Guardar</button>
            <button type="button" class="btn btn-listar" @onclick='() => NavManager.NavigateTo("/proveedores/listado")'>Listado de Proveedores</button>
        </div>
    </EditForm>
</div>
</center>


<style>
    /* Contenedor principal */
    .main-content {
        margin-left: 280px;
        padding: 40px;
        background-color: #f3f3f3;
        min-height: 100vh;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        margin: auto;
    }

    /* Título */
    .titulo-principal {
        color: limegreen;
        font-size: 1.8rem;
        margin-bottom: 25px;
        letter-spacing: 1px;
    }

    /* Formulario */
    .form-proveedor {
        background-color: white;
        padding: 30px;
        border-radius: 12px;
        box-shadow: 0 4px 10px rgba(0,0,0,0.1);
        max-width: 600px;
    }

        /* Labels */
        .form-proveedor .form-label {
            font-weight: 600;
            color: #1f2937;
            display: block;
            margin-bottom: 6px;
        }

    /* Inputs */
    .input-proveedor {
        width: 100%;
        padding: 10px 14px;
        border-radius: 8px;
        border: 1px solid #ccc;
        margin-bottom: 15px;
        transition: border-color 0.3s ease, box-shadow 0.3s ease;
    }

        .input-proveedor:focus {
            outline: none;
            border-color: limegreen;
            box-shadow: 0 0 5px rgba(50,205,50,0.4);
        }

    /* Botones */
    .botones-proveedor {
        display: flex;
        gap: 10px;
    }

    .btn-guardar {
        background-color: limegreen;
        color: white;
        border: none;
        padding: 10px 18px;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
        transition: background-color 0.3s ease, transform 0.2s ease;
    }

        .btn-guardar:hover {
            background-color: #32cd32;
            transform: translateY(-1px);
        }

    .btn-listar {
        background-color: lightgreen;
        color: black;
        border: none;
        padding: 10px 18px;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
        transition: background-color 0.3s ease, transform 0.2s ease;
    }

        .btn-listar:hover {
            background-color: #9acd32;
            transform: translateY(-1px);
        }


</style>

@if (!string.IsNullOrEmpty(mensaje))
{
    <div class="alert alert-info mt-3">@mensaje</div>
}

@code {
    private ProveedorDTO proveedor = new();
    private string mensaje = "";

    private async Task GuardarProveedor()
    {
        // 👇 Verificar si el token es válido antes de enviar
        if (!await AutheService.IsAuthenticated())
        {
            mensaje = "❌ Sesión expirada o token inválido. Inicia sesión de nuevo.";
            return;
        }

        try
        {
            // 👇 Llamada al servicio
            mensaje = await ProveedorService.CrearProveedor(proveedor);

            // 👇 Solo limpiar formulario si fue exitoso
            if (mensaje.Contains("✅"))
                proveedor = new ProveedorDTO();
        }
        catch (Exception ex)
        {
            // 👇 Captura cualquier error inesperado
            mensaje = $"❌ Error inesperado: {ex.Message}";
        }
    }
}