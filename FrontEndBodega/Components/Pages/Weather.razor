@page "/weather"
@using FrontEndBodega.Services;
@using FrontEndBodega.DTO;
@inject RegistroUserService UsuarioServicee
@inject NavigationManager NavManager

<h3>Lista de Usuarios</h3>

<!-- Campo de búsqueda -->
<div class="mb-3">
    <input type="number" @bind="idBusqueda" placeholder="Ingrese ID del usuario" class="form-control" />
    <button class="btn btn-primary mt-2" @onclick="BuscarUsuario">Buscar</button>
    <button class="btn btn-secondary mt-2 ms-2" @onclick="ResetBusqueda">Mostrar Todos</button>
</div>

@if (!string.IsNullOrEmpty(mensaje))
{
    <p>@mensaje</p>
}

<!-- Tabla de usuarios -->
<table class="table table-striped">
    <thead>
        <tr>
            <th>ID</th>
            <th>Nombre</th>
            <th>Correo</th>
            <th>Acciones</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var user in usuarios)
        {
            <tr>
                <td>@user.Id</td>
                <td>@user.NombreCompleto</td>
                <td>@user.CorreoElectronico</td>
                <td>
                    <button class="btn btn-info" @onclick='() => NavManager.NavigateTo($"/usuarios/ver/{user.Id}")'>Ver</button>
                    <button class="btn btn-warning" @onclick='() => NavManager.NavigateTo($"/usuarios/editar/{user.Id}")'>Editar</button>
                    <button class="btn btn-danger" @onclick='() => EliminarUsuario(user.Id)'>Eliminar</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<UsuarioDTO> usuarios = new List<UsuarioDTO>();
    private int idBusqueda;
    private string? mensaje;

    protected override async Task OnInitializedAsync()
    {
        await CargarUsuarios();
    }

    private async Task CargarUsuarios()
    {
        usuarios = await UsuarioServicee.GetUsuariosAsync();
    }

    private async Task EliminarUsuario(int id)
    {
        bool ok = await UsuarioServicee.EliminarUsuarioAsync(id);
        if (ok)
        {
            mensaje = "Usuario eliminado ✅";
            await CargarUsuarios();
        }
        else
        {
            mensaje = "Error al eliminar usuario ❌";
        }
    }

    private async Task BuscarUsuario()
    {
        if (idBusqueda <= 0)
        {
            mensaje = "Ingrese un ID válido";
            return;
        }

        var usuario = await UsuarioServicee.BuscarUsuarioPorIdAsync(idBusqueda);
        if (usuario != null)
        {
            usuarios = new List<UsuarioDTO> { usuario }; // Mostrar solo el buscado
            mensaje = $"Mostrando usuario con ID {idBusqueda}";
        }
        else
        {
            usuarios = new List<UsuarioDTO>();
            mensaje = $"No se encontró usuario con ID {idBusqueda}";
        }
    }

    private async Task ResetBusqueda()
    {
        idBusqueda = 0;
        mensaje = null;
        await CargarUsuarios();
    }
}