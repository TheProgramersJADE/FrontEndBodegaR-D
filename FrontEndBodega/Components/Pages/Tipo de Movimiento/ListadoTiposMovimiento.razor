@page "/listado-tipos-movimiento"
@using FrontEndBodega.DTO
@using FrontEndBodega.Services
@inject TipoMovimientoService TipoMovimientoService
@inject NavigationManager NavManager

<h3>Listado de Tipos de Movimiento</h3>

@if (tipos == null)
{
    <p>Cargando...</p>
}
else if (!tipos.Any())
{
    <p>No hay tipos de movimiento registrados.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>ID</th>
                <th>Nombre</th>
                <th>Editar Costo</th>
                <th>Tipo</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var t in tipos)
            {
                <tr>
                    <td>@t.Id</td>
                    <td>@t.Nombre</td>
                    <td>@t.EditarCosto</td>
                    <td>@t.Tipo</td>
                    <td>
                        <button class="btn btn-info" @onclick='() => NavManager.NavigateTo($"/ver-tipo-movimiento/{t.Id}")'>Ver</button>
                        <button class="btn btn-warning" @onclick='() => NavManager.NavigateTo($"/editar-tipo-movimiento/{t.Id}")'>Editar</button>
                        <button class="btn btn-danger" @onclick="() => EliminarMovimiento(t.Id)">Eliminar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<TipoMovimientoData>? tipos = null;
    private string? mensaje;                        // Mensaje que se mostrará en la UI
    private string alertClass = "alert-success";
    [Inject] IJSRuntime JS { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        tipos = await TipoMovimientoService.GetTiposMovimientoAsync();
    }

    private void VerMovimiento(int id)
    {
        // Aquí puedes navegar a un detalle o mostrar un modal
        Console.WriteLine($"Ver movimiento ID: {id}");
    }

    private void EditarMovimiento(int id)
    {
        // Aquí puedes navegar a un formulario de edición
        Console.WriteLine($"Editar movimiento ID: {id}");
    }

    private async Task EliminarMovimiento(int id)
    {
        var confirmado = await JS.InvokeAsync<bool>("confirm", $"¿Eliminar tipo de movimiento ID {id}?");
        if (!confirmado) return;

        var exito = await TipoMovimientoService.EliminarTipoMovimientoAsync(id);
        if (exito)
        {
            mensaje = "Tipo de movimiento eliminado ✅";
            alertClass = "alert-success";
            // Refrescar lista
            tipos = await TipoMovimientoService.GetTiposMovimientoAsync();
        }
        else
        {
            mensaje = "Error al eliminar ❌";
            alertClass = "alert-danger";
        }
    }

}
