@page "/listado-tipos-movimiento"
@using FrontEndBodega.DTO
@using FrontEndBodega.Services
@inject TipoMovimientoService TipoMovimientoService
@inject NavigationManager NavManager

<div class="main-content">
    <h3 class="titulo-principal">Listado de Tipos de Movimiento</h3>

    <div class="busqueda-container">
        <input class="input-busqueda" placeholder="Buscar por nombre..." @bind="textoBusqueda" />
        <button class="btn btn-buscar" @onclick="Buscar">Buscar</button>
        <button class="btn btn-mostrar" @onclick="CargarTodos">Ver Todos</button>
    </div>

    @if (tipos == null)
    {
        <p class="mensaje-cargando">Cargando...</p>
    }
    else if (!tipos.Any())
    {
        <p class="mensaje-cargando">No hay tipos de movimiento registrados.</p>
    }
    else
    {
        <table class="tabla-usuarios">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Nombre</th>
                    <th>Editar Costo</th>
                    <th>Tipo</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var t in tipos)
                {
                    <tr>
                        <td>@t.Id</td>
                        <td>@t.Nombre</td>
                        <td>@t.EditarCosto</td>
                        <td>@t.Tipo</td>
                        <td class="acciones">
                            <button class="btn btn-ver" @onclick='() => NavManager.NavigateTo($"/ver-tipo-movimiento/{t.Id}")'>Ver</button>
                            <button class="btn btn-editar" @onclick='() => NavManager.NavigateTo($"/editar-tipo-movimiento/{t.Id}")'>Editar</button>
                            <button class="btn btn-eliminar" @onclick="() => EliminarMovimiento(t.Id)">Eliminar</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <!-- Paginación -->
        <nav>
            <ul class="pagination">
                <li class="page-item @(paginaActual == 1 ? "disabled" : "")">
                    <button class="page-link" @onclick="PrevPage">« Anterior</button>
                </li>
                @for (int i = 1; i <= totalPaginas; i++)
                {
                    <li class="page-item @(paginaActual == i ? "active" : "")">
                        <button class="page-link" @onclick="() => CambiarPagina(i)">@i</button>
                    </li>
                }
                <li class="page-item @(paginaActual == totalPaginas ? "disabled" : "")">
                    <button class="page-link" @onclick="NextPage">Siguiente »</button>
                </li>
            </ul>
        </nav>
    }
</div>
<style>
    /* Contenedor principal */
    .main-content {
        margin-left: 280px;
        padding: 40px;
        background-color: #f3f3f3;
        min-height: 100vh;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        color: #1f2937;
        margin: 20px auto;
    }

    /* Título */
    .titulo-principal {
        color: limegreen;
        font-size: 1.8rem;
        margin-bottom: 20px;
        letter-spacing: 1px;
    }

    /* Campo de búsqueda */
    .busqueda-container {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        margin-bottom: 25px;
    }

    .input-busqueda {
        flex: 1;
        padding: 10px 12px;
        border-radius: 8px;
        border: 1px solid #ccc;
        transition: all 0.3s ease;
    }

        .input-busqueda:focus {
            outline: none;
            border-color: limegreen;
            box-shadow: 0 0 5px rgba(50,205,50,0.5);
        }

    /* Botones */
    .btn {
        padding: 10px 18px;
        border-radius: 8px;
        border: none;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .btn-buscar {
        background-color: limegreen;
        color: white;
    }

        .btn-buscar:hover {
            background-color: #32cd32;
        }

    .btn-mostrar {
        background-color: lightgreen;
        color: black;
    }

        .btn-mostrar:hover {
            background-color: #9acd32;
        }

    /* Mensajes */
    .mensaje-cargando {
        background-color: #e6ffe6;
        color: #2e7d32;
        padding: 12px 15px;
        border-radius: 8px;
        margin-bottom: 20px;
        border-left: 4px solid limegreen;
    }

    /* Tabla */
    .tabla-usuarios {
        width: 100%;
        border-collapse: separate;
        border-spacing: 0;
        border-radius: 10px;
        overflow: hidden;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        background-color: white;
    }

        .tabla-usuarios th, .tabla-usuarios td {
            padding: 12px 15px;
            text-align: left;
        }

        .tabla-usuarios thead {
            background-color: limegreen;
            color: white;
            font-weight: 600;
        }

        .tabla-usuarios tbody tr:nth-child(even) {
            background-color: #f3f3f3;
        }

        .tabla-usuarios tbody tr:hover {
            background-color: #d4ffd4;
        }

    /* Botones dentro de la tabla */
    .acciones .btn {
        padding: 6px 12px;
        font-size: 0.9rem;
        border-radius: 6px;
        margin-right: 5px;
    }

    .btn-ver {
        background-color: #17a2b8;
        color: white;
    }

        .btn-ver:hover {
            background-color: #138496;
        }

    .btn-editar {
        background-color: #ffc107;
        color: black;
    }

        .btn-editar:hover {
            background-color: #e0a800;
        }

    .btn-eliminar {
        background-color: #dc3545;
        color: white;
    }

        .btn-eliminar:hover {
            background-color: #c82333;
        }

    /* Paginación */
    .pagination {
        display: flex;
        list-style: none;
        gap: 5px;
        margin-top: 20px;
        padding-left: 0;
    }

    .page-item .page-link {
        padding: 6px 12px;
        border-radius: 6px;
        border: 1px solid #ccc;
        background-color: white;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .page-item.disabled .page-link {
        cursor: not-allowed;
        opacity: 0.6;
    }

    .page-item.active .page-link {
        background-color: limegreen;
        color: white;
        border-color: limegreen;
    }

    .page-item .page-link:hover:not(.active) {
        background-color: #d4ffd4;
    }

</style>


@code {
    private List<TipoMovimientoData>? tipos = null;
    private string? mensaje;                        // Mensaje que se mostrará en la UI
    private string alertClass = "alert-success";
    private List<TipoMovimientoDTO> tipoMovimiento = new();
    private List<TipoMovimientoDTO> tipoMovimientoPagina = new();
    // Paginación
    private int paginaActual = 1;
    private int tamanioPagina = 8;
    private int totalPaginas = 1;
    private string textoBusqueda = string.Empty;
    [Inject] IJSRuntime JS { get; set; } = default!;
    private void PrevPage() { if (paginaActual > 1) CambiarPagina(paginaActual - 1); }
    private void NextPage() { if (paginaActual < totalPaginas) CambiarPagina(paginaActual + 1); }

    protected override async Task OnInitializedAsync()
    {
        tipos = await TipoMovimientoService.GetTiposMovimientoAsync();
    }

    private void VerMovimiento(int id)
    {
        // Aquí puedes navegar a un detalle o mostrar un modal
        Console.WriteLine($"Ver movimiento ID: {id}");
    }

    private void EditarMovimiento(int id)
    {
        // Aquí puedes navegar a un formulario de edición
        Console.WriteLine($"Editar movimiento ID: {id}");
    }

    private async Task EliminarMovimiento(int id)
    {
        var confirmado = await JS.InvokeAsync<bool>("confirm", $"¿Eliminar tipo de movimiento ID {id}?");
        if (!confirmado) return;

        var exito = await TipoMovimientoService.EliminarTipoMovimientoAsync(id);
        if (exito)
        {
            mensaje = "Tipo de movimiento eliminado ✅";
            alertClass = "alert-success";
            // Refrescar lista
            tipos = await TipoMovimientoService.GetTiposMovimientoAsync();
        }
        else
        {
            mensaje = "Error al eliminar ❌";
            alertClass = "alert-danger";
        }
    }

    private void CalcularPaginacion()
    {
        totalPaginas = (int)Math.Ceiling((double)tipoMovimiento.Count / tamanioPagina);
        if (totalPaginas == 0) totalPaginas = 1;
        CambiarPagina(1);
    }

    private void CambiarPagina(int pagina)
    {
        paginaActual = pagina;
        tipoMovimientoPagina = tipoMovimiento.Skip((paginaActual - 1) * tamanioPagina).Take(tamanioPagina).ToList();
    }


    private async Task Buscar()
    {
        if (string.IsNullOrWhiteSpace(textoBusqueda))
            return;

        tipos = await TipoMovimientoService.BuscarTipoMovimientosAsync(textoBusqueda);
    }

    private async Task CargarTodos()
    {
        textoBusqueda = string.Empty;
        tipos = await TipoMovimientoService.GetTiposMovimientoAsync();
    }

}
